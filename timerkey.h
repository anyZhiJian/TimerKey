// SPDX-License-Identifier: MIT
// Copyright (c) 2025 yanzhijian

#ifndef __TIMERKEY_H
#define __TIMERKEY_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdlib.h>

#define tkey_malloc(size) malloc(size)
#define tkey_free(ptr) free(ptr)

/**
 * @brief Enumeration of key events
 */
typedef enum {
    TKEY_EVENT_PRESS = 0x01,      /* Event when the key is pressed */
    TKEY_EVENT_LONG_PRESS = 0x02, /* Event when the key is long pressed */
    TKEY_EVENT_RELEASE = 0x04,    /* Event when the key is released */
    TKEY_EVENT_LONG_RELEASE =
        0x08, /* Event when the key is released after long pressing */
    TKEY_EVENT_MULTI_PRESS =
        0x10, /* Event when the key is pressed multiple times */
    TKEY_EVENT_MULTI_RELEASE = 0x20, /* Event when the key is released after
                                        being pressed multiple times */
    TKEY_EVENT_DEFAULT_PRESS =
        (TKEY_EVENT_PRESS |
         TKEY_EVENT_MULTI_PRESS), /* The default event of the key being pressed,
                                     including pressing and multiple pressing */
    TKEY_EVENT_ALL_PRESS = (TKEY_EVENT_PRESS | TKEY_EVENT_LONG_PRESS |
                            TKEY_EVENT_MULTI_PRESS), /* All key press events */
    TKEY_EVENT_ALL_RELEASE =
        (TKEY_EVENT_RELEASE | TKEY_EVENT_LONG_RELEASE |
         TKEY_EVENT_MULTI_RELEASE), /* All key release events */
} tkey_event_t;

/**
 * @brief The type of the key object handle
 */
typedef struct tkey_t *tkey_handle_t;

/**
 * @brief Callback function for handling key events
 *
 * @param key The key object that triggers this callback
 * @param event Events generated by key presses
 * @param press_count Count of multiple key presses
 * @param user_data User data pointer passed into the event callback function
 * and the detection callback function
 */
typedef void (*tkey_event_cb_t)(tkey_handle_t key, tkey_event_t event,
                                uint8_t press_count, void *user_data);

/**
 * @brief Callback function for detecting key presses
 *
 * @param user_data User data pointer passed into the event callback function
 * and the detection callback function
 * @return
 * Should return the level of the key read by gpio
 */
typedef int (*tkey_detect_cb_t)(void *user_data);

/**
 * @brief Configuration of key object
 */
typedef struct {
    tkey_event_cb_t event_cb; /* Callback function for handling key events */
    tkey_detect_cb_t
        detect_cb;           /* Callback function for detecting key presses */
    void *user_data;         /* User data pointer passed into the event callback
                                function and the detection callback function */
    uint16_t hold_ticks;     /* Long press duration */
    uint16_t debounce_ticks; /* Key debounce time */
    uint16_t multi_press_interval_ticks; /* The interval between multiple key
                                            presses */
    uint16_t pressed_level; /* The level when the key is pressed, it's value
                               should be the same as the input value of gpio */
} tkey_config_t;

/**
 * @brief Create a key object with default configuration
 *
 * @param event_cb Callback function for handling key events
 * @param detect_cb Callback function for detecting key presses
 * @param user_data User data pointer passed into the event callback function
 * and the detection callback function
 * @return
 * Returns the handle of the key object if successful, otherwise returns NULL
 */
tkey_handle_t tkey_create_default(tkey_event_cb_t event_cb,
                                  tkey_detect_cb_t detect_cb, void *user_data);

/**
 * @brief Create key object
 *
 * @param config Configuration of key object
 * @return
 * Returns the handle of the key object if successful, otherwise returns NULL
 */
tkey_handle_t tkey_create(tkey_config_t *config);

/**
 * @brief Delete key object
 *
 * @param key Handle to the key object
 */
void tkey_delete(tkey_handle_t key);

/**
 * @brief key handler, this handler should be called at the configured frequency
 *
 * @param key Handle to the key object
 */
void tkey_handler(tkey_handle_t key);

/**
 * @brief Multiple key handlers, these keys should be detected at the same
 * frequency
 *
 * @param key key handle array
 * @param num The number of key objects
 */
void tkey_multi_handler(tkey_handle_t key[], uint32_t num);

/**
 * @brief Register callback function for key object
 *
 * @param key Handle to the key object
 * @param event_cb Callback function for handling key events
 * @param detect_cb Callback function for detecting key presses
 * @param user_data User data pointer passed into the event callback function
 * and the detection callback function
 */
void tkey_register_callback(tkey_handle_t key, tkey_event_cb_t event_cb,
                            tkey_detect_cb_t detect_cb, void *user_data);

/**
 * @brief Set the detection level when the key is pressed
 *
 * @param key Handle to the key object
 * @param pressed_level The level when the key is pressed, it's value should be
 * the same as the input value of gpio
 */
void tkey_set_pressed_level(tkey_handle_t key, uint8_t pressed_level);

/**
 * @brief Set the duration of the long press of the key
 *
 * @param key Handle to the key object
 * @param hold_ticks Long press duration
 */
void tkey_set_hold(tkey_handle_t key, uint16_t hold_ticks);

/**
 * @brief Set the debounce time of the key
 *
 * @param key Handle to the key object
 * @param debounce_ticks Key debounce time
 */
void tkey_set_debounce(tkey_handle_t key, uint16_t debounce_ticks);

/**
 * @brief Set the interval between multiple key presses
 *
 * @param key Handle to the key object
 * @param multi_press_interval_ticks The interval between multiple key presses
 */
void tkey_set_multi_press_interval(tkey_handle_t key,
                                   uint16_t multi_press_interval_ticks);

/**
 * @brief Enable or disable a key object
 *
 * @param key Handle to the key object
 * @param enabled True to enable, false to disable
 */
void tkey_set_enabled(tkey_handle_t key, uint8_t enabled);

#ifdef __cplusplus
}
#endif

#endif